name: CMake on multiple platforms (Inlining Benchmark)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure CMake (default_inline)
      working-directory: ${{ github.workspace }}/optimizations/inlining
      run: >
        cmake -B build
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S .

    - name: Build (default_inline)
      working-directory: ${{ github.workspace }}/optimizations/inlining
      run: cmake --build build --config ${{ matrix.build_type }}

    - name: Run default_inline benchmark
      working-directory: ${{ github.workspace }}/optimizations/inlining/build
      run: ./inlining 1000 3 default_results.csv

    - name: Configure & Build (forced_inline)
      working-directory: ${{ github.workspace }}/optimizations/inlining
      run: |
        cmake -B build_forced -DFORCE_INLINE=ON -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -S .
        cmake --build build_forced --config ${{ matrix.build_type }}

    - name: Run forced_inline benchmark
      working-directory: ${{ github.workspace }}/optimizations/inlining/build_forced
      run: ./inlining 1000 3 force_results.csv

    - name: Configure & Build (no_inline)
      working-directory: ${{ github.workspace }}/optimizations/inlining
      run: |
        cmake -B build_noinline -DNO_INLINE=ON -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -S .
        cmake --build build_noinline --config ${{ matrix.build_type }}

    - name: Run no_inline benchmark
      working-directory: ${{ github.workspace }}/optimizations/inlining/build_noinline
      run: ./inlining 1000 3 noinline_results.csv

    - name: Verify result files
      working-directory: ${{ github.workspace }}/optimizations/inlining
      run: |
        test -f build/default_results.csv || (echo "❌ default_results.csv missing" && exit 1)
        test -f build_forced/force_results.csv || (echo "❌ force_results.csv missing" && exit 1)
        test -f build_noinline/noinline_results.csv || (echo "❌ noinline_results.csv missing" && exit 1)
        echo "✅ All output files present."
