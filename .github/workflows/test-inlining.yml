name: Inlining-Benchmark (CMake ‚Ä¢ multi-platform)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest   # MSVC
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest    # GCC
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest    # Clang
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest   # no GCC / Clang on Windows runner
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest    # no MSVC on Linux runner
            c_compiler: cl

    steps:
    - name: ‚¨áÔ∏è Checkout
      uses: actions/checkout@v4

    ####################################################################
    # DEFAULT-INLINE BUILD & RUN
    ####################################################################
    - name: ‚öôÔ∏è  Configure (default)
      working-directory: optimizations/inlining
      run: >
        cmake -B build
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S .

    - name: üèóÔ∏è  Build (default)
      working-directory: optimizations/inlining
      run: cmake --build build --config ${{ matrix.build_type }}

    - name: üöÄ Run (default)
      working-directory: optimizations/inlining/build
      run: ./inlining 1000 3 default_results.csv

    ####################################################################
    # FORCE-INLINE BUILD & RUN
    ####################################################################
    - name: ‚öôÔ∏è  Configure (forced-inline)
      working-directory: optimizations/inlining
      run: >
        cmake -B build_forced
        -DFORCE_INLINE=ON
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S .

    - name: üèóÔ∏è  Build (forced-inline)
      working-directory: optimizations/inlining
      run: cmake --build build_forced --config ${{ matrix.build_type }}

    - name: üöÄ Run (forced-inline)
      working-directory: optimizations/inlining/build_forced
      run: ./inlining 1000 3 force_results.csv

    ####################################################################
    # NO-INLINE BUILD & RUN
    ####################################################################
    - name: ‚öôÔ∏è  Configure (no-inline)
      working-directory: optimizations/inlining
      run: >
        cmake -B build_noinline
        -DNO_INLINE=ON
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S .

    - name: üèóÔ∏è  Build (no-inline)
      working-directory: optimizations/inlining
      run: cmake --build build_noinline --config ${{ matrix.build_type }}

    - name: üöÄ Run (no-inline)
      working-directory: optimizations/inlining/build_noinline
      run: ./inlining 1000 3 noinline_results.csv

    ####################################################################
    # VERIFY OUTPUT FILES
    ####################################################################
    - name: ‚úÖ Verify CSV outputs
      working-directory: optimizations/inlining
      shell: bash
      run: |
        for f in build/default_results.csv \
                 build_forced/force_results.csv \
                 build_noinline/noinline_results.csv
        do
            [[ -f "$f" ]] || { echo "‚ùå $f missing" ; exit 1 ; }
        done
        echo "All result files present ‚úÖ"
